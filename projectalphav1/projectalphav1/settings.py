"""
Django settings for projectalphav1 project.

Generated by 'django-admin startproject' using Django 5.2.

For more information on this file, see
https://docs.djangoproject.com/en/5.2/topics/settings/

For the full list of settings and their values, see
https://docs.djangoproject.com/en/5.2/ref/settings/

Notes:
- Environment variables are loaded from a project-root `.env` using python-dotenv.
Docs reviewed:
* Django settings: https://docs.djangoproject.com/en/5.2/topics/settings/
* python-dotenv: https://saurabh-kumar.com/python-dotenv/ (official docs)
"""

import os
import dj_database_url
from pathlib import Path
from dotenv import load_dotenv

# Maximum number of fields allowed in a single Django form submission
# Docs reviewed: https://docs.djangoproject.com/en/5.2/ref/settings/#data-upload-max-number-fields
DATA_UPLOAD_MAX_NUMBER_FIELDS = int(
    os.getenv('DJANGO_DATA_UPLOAD_MAX_NUMBER_FIELDS', '20000')
)

# Build paths inside the project like this: BASE_DIR / 'subdir'.
BASE_DIR = Path(__file__).resolve().parent.parent

# Load environment variables from project `.env` if present
# This allows local development without exporting env vars manually.
load_dotenv(dotenv_path=str(BASE_DIR / '.env'))

# ALSO load from the repository root `.env` if present (one level above BASE_DIR)
# This supports setups where the top-level workspace stores environment vars.
try:
    from pathlib import Path as _Path
    load_dotenv(dotenv_path=str(_Path(BASE_DIR).parent / '.env'))
except Exception:
    # Non-fatal; continue if the extra .env is not present
    pass

# Helper for parsing booleans from env in a robust way
def env_bool(key: str, default: bool) -> bool:
    val = os.getenv(key)
    if val is None:
        return default
    return val.strip().lower() in ('1', 'true', 'yes', 'on')


# Quick-start development settings - unsuitable for production
# See https://docs.djangoproject.com/en/5.2/howto/deployment/checklist/

# SECURITY WARNING: keep the secret key used in production secret!
# Read from env with a sane development default. Ensure you set DJANGO_SECRET_KEY in production.
SECRET_KEY = os.getenv(
'DJANGO_SECRET_KEY',
'django-insecure-)(-!^!99&ij_&$e8di2c+#==-h@wiabm5*-1t+eh1gm=wq%i+a'
)

# SECURITY WARNING: don't run with debug turned on in production!
DEBUG = env_bool('DJANGO_DEBUG', True)

ALLOWED_HOSTS = [
h.strip() for h in os.getenv('DJANGO_ALLOWED_HOSTS', '').split(',') if h.strip()
]


# Application definition

INSTALLED_APPS = [
# Admin interface must be before django.contrib.admin
'admin_interface',
'colorfield',
'django.contrib.admin',
'django.contrib.auth',
'django.contrib.contenttypes',
'django.contrib.sessions',
'django.contrib.messages',
'django.contrib.staticfiles',
# Third-party apps
'rest_framework',
'rest_framework.authtoken',
'corsheaders',
# Shared domain models/utilities
'core',
'acq_module.apps.AcqModuleConfig',
'am_module',
'etl',
'user_admin',  
'reporting',
]

MIDDLEWARE = [
'django.middleware.security.SecurityMiddleware',
'whitenoise.middleware.WhiteNoiseMiddleware',  # WhiteNoise must be after SecurityMiddleware
'django.contrib.sessions.middleware.SessionMiddleware',
'corsheaders.middleware.CorsMiddleware',  # CORS middleware - must be before CommonMiddleware
'django.middleware.common.CommonMiddleware',
'django.middleware.csrf.CsrfViewMiddleware',
'django.contrib.auth.middleware.AuthenticationMiddleware',
'django.contrib.messages.middleware.MessageMiddleware',
'django.middleware.clickjacking.XFrameOptionsMiddleware',
]

# WHAT: Inject development-only CSRF bypass middleware at the top of the stack when DEBUG is true
# WHY: Allows local Vue dev server POSTs without CSRF token friction while keeping production secure
# WHERE: Placed before SecurityMiddleware so request flag is set ahead of CSRF processing
# HOW: Uses documented request attribute `_dont_enforce_csrf_checks`
if DEBUG:
    MIDDLEWARE.insert(
        0,
        'projectalphav1.middleware.dev_csrf_bypass.DevCSRFBuypassMiddleware',
    )

ROOT_URLCONF = 'projectalphav1.urls'

TEMPLATES = [
{
'BACKEND': 'django.template.backends.django.DjangoTemplates',
'DIRS': [BASE_DIR.parent / 'frontend_vue' / 'dist'],
'APP_DIRS': True,
'OPTIONS': {
'context_processors': [
'django.template.context_processors.request',
'django.contrib.auth.context_processors.auth',
'django.contrib.messages.context_processors.messages',
],
},
},
]

WSGI_APPLICATION = 'projectalphav1.wsgi.application'


# Database
# https://docs.djangoproject.com/en/5.2/ref/settings/#databases
# Docs reviewed:
# * dj-database-url: https://github.com/jazzband/dj-database-url

# Use Railway DB in production (via DATABASE_URL env var), local DB in development
if os.environ.get('DATABASE_URL'):
    # Production (Railway) - PostgreSQL via DATABASE_URL
    # Parse the Railway DATABASE_URL and configure both connections to point to production
    railway_db_config = dj_database_url.parse(
        os.environ.get('DATABASE_URL'),
        conn_max_age=600,
        ssl_require=False,
    )
    
    # Configure default connection with core schema search path
    DATABASES = {
        'default': {
            **railway_db_config,
            'OPTIONS': {
                # Include seller_data so admin queries on default can join to seller tables
                'options': '-c search_path=core,seller_data,public'
            },
        },
        # The seller_data schema database connection (same Railway DB, different schema)
        'seller_data': {
            **railway_db_config,
            'OPTIONS': {
                # Include core so seller_data connection can see non-seller tables
                'options': '-c search_path=seller_data,core,public'
            },
        },
    }
else:
    # Development (Local) - PostgreSQL with separate schema connections
    DATABASES = {
        # The default database points to the core schema
        'default': {
            'ENGINE': 'django.db.backends.postgresql',
            'NAME': os.getenv('DB_NAME', 'projectalphav1'),
            'USER': os.getenv('DB_USER', 'postgres'),
            'PASSWORD': os.getenv('DB_PASSWORD', '1218'),  # Default password for development
            'HOST': os.getenv('DB_HOST', 'localhost'),
            'PORT': os.getenv('DB_PORT', '5432'),
            'OPTIONS': {
                # Include seller_data so admin queries on default can join to seller tables
                'options': '-c search_path=core,seller_data,public'
            },
        },
        # The seller_data schema database connection
        'seller_data': {
            'ENGINE': 'django.db.backends.postgresql',
            'NAME': os.getenv('DB_NAME', 'projectalphav1'),  # Same database, different schema
            'USER': os.getenv('DB_USER', 'postgres'),
            'PASSWORD': os.getenv('DB_PASSWORD', '1218'),  # Default password for development
            'HOST': os.getenv('DB_HOST', 'localhost'),
            'PORT': os.getenv('DB_PORT', '5432'),
            'OPTIONS': {
                # Include core so seller_data connection can see non-seller tables
                'options': '-c search_path=seller_data,core,public'
            },
        },
    }

# Configure the database routers
DATABASE_ROUTERS = ['projectalphav1.router.SchemaRouter']


# Password validation
# https://docs.djangoproject.com/en/5.2/ref/settings/#auth-password-validators

AUTH_PASSWORD_VALIDATORS = [
{
'NAME': 'django.contrib.auth.password_validation.UserAttributeSimilarityValidator',
},
{
'NAME': 'django.contrib.auth.password_validation.MinimumLengthValidator',
},
{
'NAME': 'django.contrib.auth.password_validation.CommonPasswordValidator',
},
{
'NAME': 'django.contrib.auth.password_validation.NumericPasswordValidator',
},
]


# Internationalization
# https://docs.djangoproject.com/en/5.2/topics/i18n/

LANGUAGE_CODE = 'en-us'

TIME_ZONE = 'UTC'

USE_I18N = True

USE_TZ = True


# Static files (CSS, JavaScript, Images)
# https://docs.djangoproject.com/en/5.2/howto/static-files/
# WhiteNoise docs: https://whitenoise.readthedocs.io/

STATIC_URL = '/static/'
STATIC_ROOT = BASE_DIR / 'staticfiles'
STATICFILES_DIRS = [
    BASE_DIR.parent / 'frontend_vue' / 'dist',
]

# WhiteNoise configuration for serving static files in production
STORAGES = {
    "default": {
        "BACKEND": "django.core.files.storage.FileSystemStorage",
    },
    "staticfiles": {
        "BACKEND": "whitenoise.storage.CompressedManifestStaticFilesStorage",
    },
}

# Default primary key field type
# https://docs.djangoproject.com/en/5.2/ref/settings/#default-auto-field

DEFAULT_AUTO_FIELD = 'django.db.models.BigAutoField'

# REST Framework settings
# Docs: https://www.django-rest-framework.org/api-guide/settings/
REST_FRAMEWORK = {
    'DEFAULT_AUTHENTICATION_CLASSES': [
        'rest_framework.authentication.TokenAuthentication',
        'rest_framework.authentication.SessionAuthentication',
    ],
    'DEFAULT_PERMISSION_CLASSES': [
        'rest_framework.permissions.AllowAny',
    ],
    # Pagination settings for list endpoints
    'DEFAULT_PAGINATION_CLASS': 'rest_framework.pagination.PageNumberPagination',
    'PAGE_SIZE': 25,  # Default page size for paginated responses
}

# Django cache settings
# Docs reviewed:
# * Django cache framework: https://docs.djangoproject.com/en/5.2/topics/cache/
# Provide a safe default local-memory cache for development and small deployments.
# For production, consider Redis or Memcached backends.
CACHES = {
    'default': {
        'BACKEND': 'django.core.cache.backends.locmem.LocMemCache',
        'LOCATION': 'projectalphav1-local',
        # Prefix all keys to avoid collisions when multiple projects share a cache
        'KEY_PREFIX': os.getenv('DJANGO_CACHE_KEY_PREFIX', 'projectalphav1'),
        # Default cache timeout (seconds). Per-key timeouts in code will override this.
        'TIMEOUT': int(os.getenv('DJANGO_CACHE_TIMEOUT', '300')),
    }
}

# CORS settings
# Docs reviewed:
# * django-cors-headers: https://github.com/adamchainz/django-cors-headers
CORS_ALLOW_ALL_ORIGINS = env_bool('DJANGO_CORS_ALLOW_ALL_ORIGINS', True)  # For development only, set to False in production
CORS_ALLOW_CREDENTIALS = env_bool('DJANGO_CORS_ALLOW_CREDENTIALS', True)
CORS_ALLOWED_ORIGINS = [
o.strip() for o in os.getenv(
'DJANGO_CORS_ALLOWED_ORIGINS',
'http://localhost:8080,http://localhost:8000,http://localhost:5173'
).split(',') if o.strip()
]

# CSRF Trusted Origins - required for Railway production frontend
# Docs: https://docs.djangoproject.com/en/5.2/ref/settings/#csrf-trusted-origins
CSRF_TRUSTED_ORIGINS = [
o.strip() for o in os.getenv(
'DJANGO_CSRF_TRUSTED_ORIGINS',
'http://localhost:8080,http://localhost:8000,http://localhost:5173'
).split(',') if o.strip()
]

# CSRF Cookie Settings for Cross-Origin Requests
# Required for frontend on different domain to send CSRF token
# Docs: https://docs.djangoproject.com/en/5.2/ref/settings/#csrf-cookie-samesite
CSRF_COOKIE_SAMESITE = 'None'  # Allow cross-origin cookies
CSRF_COOKIE_SECURE = not DEBUG  # Require HTTPS in production
CSRF_COOKIE_HTTPONLY = False  # Allow JavaScript to read cookie (needed for CSRF token)

# Session Cookie Settings for Cross-Origin
SESSION_COOKIE_SAMESITE = 'None'
SESSION_COOKIE_SECURE = True  # Always require HTTPS for session cookies

# Media files
MEDIA_URL = '/media/'
MEDIA_ROOT = BASE_DIR / 'media'

# Using standard Django admin interface

