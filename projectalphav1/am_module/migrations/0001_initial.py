# Generated by Django 5.2.5 on 2025-09-17 19:56

import django.db.models.deletion
from django.conf import settings
from django.db import migrations, models


class Migration(migrations.Migration):

    initial = True

    dependencies = [
        ('core', '0001_initial'),
        migrations.swappable_dependency(settings.AUTH_USER_MODEL),
    ]

    operations = [
        migrations.CreateModel(
            name='SellerBoardedData',
            fields=[
                ('id', models.BigAutoField(auto_created=True, primary_key=True, serialize=False, verbose_name='ID')),
                ('acq_seller_id', models.IntegerField(help_text='ID reference to the original Seller model in acq_module', null=True)),
                ('acq_trade_id', models.IntegerField(help_text='ID reference to the original Trade model in acq_module', null=True)),
                ('seller_name', models.CharField(blank=True, max_length=100, null=True)),
                ('trade_name', models.CharField(blank=True, max_length=100, null=True)),
                ('sellertape_id', models.CharField(blank=True, max_length=64, null=True)),
                ('sellertape_altid', models.CharField(blank=True, max_length=64, null=True)),
                ('asset_status', models.CharField(blank=True, choices=[('NPL', 'NPL'), ('REO', 'REO'), ('PERF', 'PERF'), ('RPL', 'RPL')], max_length=100, null=True)),
                ('street_address', models.CharField(blank=True, max_length=100, null=True)),
                ('city', models.CharField(blank=True, max_length=100, null=True)),
                ('state', models.CharField(blank=True, max_length=100, null=True)),
                ('zip', models.CharField(blank=True, max_length=100, null=True)),
                ('property_type', models.CharField(blank=True, choices=[('SFR', 'SFR'), ('Manufactured', 'Manufactured'), ('Condo', 'Condo'), ('2-4 Family', '2-4 Family'), ('Land', 'Land'), ('Multifamily 5+', 'Multifamily 5+')], default='SFR', max_length=100, null=True)),
                ('occupancy', models.CharField(blank=True, choices=[('Vacant', 'Vacant'), ('Occupied', 'Occupied'), ('Unknown', 'Unknown')], default='Unknown', max_length=100, null=True)),
                ('year_built', models.IntegerField(blank=True, null=True)),
                ('sq_ft', models.IntegerField(blank=True, null=True)),
                ('lot_size', models.IntegerField(blank=True, null=True)),
                ('beds', models.IntegerField(blank=True, null=True)),
                ('baths', models.IntegerField(blank=True, null=True)),
                ('current_balance', models.DecimalField(blank=True, decimal_places=2, max_digits=15, null=True)),
                ('deferred_balance', models.DecimalField(blank=True, decimal_places=2, max_digits=15, null=True)),
                ('interest_rate', models.DecimalField(blank=True, decimal_places=4, max_digits=6, null=True)),
                ('next_due_date', models.DateField(blank=True, null=True)),
                ('last_paid_date', models.DateField(blank=True, null=True)),
                ('first_pay_date', models.DateField(blank=True, null=True)),
                ('origination_date', models.DateField(blank=True, null=True)),
                ('original_balance', models.DecimalField(blank=True, decimal_places=2, max_digits=15, null=True)),
                ('original_term', models.IntegerField(blank=True, null=True)),
                ('original_rate', models.DecimalField(blank=True, decimal_places=4, max_digits=6, null=True)),
                ('original_maturity_date', models.DateField(blank=True, null=True)),
                ('default_rate', models.DecimalField(blank=True, decimal_places=4, max_digits=6, null=True)),
                ('months_dlq', models.IntegerField(blank=True, null=True)),
                ('current_maturity_date', models.DateField(blank=True, null=True)),
                ('current_term', models.IntegerField(blank=True, null=True)),
                ('accrued_note_interest', models.DecimalField(blank=True, decimal_places=2, max_digits=15, null=True)),
                ('accrued_default_interest', models.DecimalField(blank=True, decimal_places=2, max_digits=15, null=True)),
                ('escrow_balance', models.DecimalField(blank=True, decimal_places=2, max_digits=15, null=True)),
                ('escrow_advance', models.DecimalField(blank=True, decimal_places=2, max_digits=15, null=True)),
                ('recoverable_corp_advance', models.DecimalField(blank=True, decimal_places=2, max_digits=15, null=True)),
                ('late_fees', models.DecimalField(blank=True, decimal_places=2, max_digits=15, null=True)),
                ('other_fees', models.DecimalField(blank=True, decimal_places=2, max_digits=15, null=True)),
                ('suspense_balance', models.DecimalField(blank=True, decimal_places=2, max_digits=15, null=True)),
                ('total_debt', models.DecimalField(blank=True, decimal_places=2, max_digits=15, null=True)),
                ('origination_value', models.DecimalField(blank=True, decimal_places=2, max_digits=15, null=True)),
                ('origination_arv', models.DecimalField(blank=True, decimal_places=2, max_digits=15, null=True)),
                ('origination_value_date', models.DateField(blank=True, null=True)),
                ('seller_value_date', models.DateField(blank=True, null=True)),
                ('seller_arv_value', models.DecimalField(blank=True, decimal_places=2, max_digits=15, null=True)),
                ('seller_asis_value', models.DecimalField(blank=True, decimal_places=2, max_digits=15, null=True)),
                ('additional_asis_value', models.DecimalField(blank=True, decimal_places=2, max_digits=15, null=True)),
                ('additional_arv_value', models.DecimalField(blank=True, decimal_places=2, max_digits=15, null=True)),
                ('additional_value_date', models.DateField(blank=True, null=True)),
                ('fc_flag', models.BooleanField(blank=True, default=None, null=True)),
                ('fc_first_legal_date', models.DateField(blank=True, null=True)),
                ('fc_referred_date', models.DateField(blank=True, null=True)),
                ('fc_judgement_date', models.DateField(blank=True, null=True)),
                ('fc_scheduled_sale_date', models.DateField(blank=True, null=True)),
                ('fc_sale_date', models.DateField(blank=True, null=True)),
                ('fc_starting', models.DecimalField(blank=True, decimal_places=2, max_digits=15, null=True)),
                ('bk_flag', models.BooleanField(blank=True, default=None, null=True)),
                ('bk_chapter', models.CharField(blank=True, max_length=10, null=True)),
                ('mod_flag', models.BooleanField(blank=True, default=None, null=True)),
                ('mod_date', models.DateField(blank=True, null=True)),
                ('mod_maturity_date', models.DateField(blank=True, null=True)),
                ('mod_term', models.IntegerField(blank=True, null=True)),
                ('mod_rate', models.DecimalField(blank=True, decimal_places=4, max_digits=6, null=True)),
                ('mod_initial_balance', models.DecimalField(blank=True, decimal_places=2, max_digits=15, null=True)),
                ('boarded_at', models.DateTimeField(auto_now_add=True, help_text='When this record was boarded into the AM module')),
                ('boarded_by', models.CharField(blank=True, help_text='User who initiated the boarding process', max_length=100, null=True)),
                ('created_at', models.DateTimeField(auto_now_add=True)),
                ('updated_at', models.DateTimeField(auto_now=True)),
                ('asset_hub', models.OneToOneField(blank=True, help_text='One boarded record per hub/asset.', null=True, on_delete=django.db.models.deletion.PROTECT, related_name='am_boarded', to='core.assetidhub')),
            ],
            options={
                'verbose_name': 'Boarded Seller Data',
                'verbose_name_plural': 'Boarded Seller Data',
                'ordering': ['-boarded_at'],
            },
        ),
        migrations.CreateModel(
            name='AMMetrics',
            fields=[
                ('id', models.BigAutoField(auto_created=True, primary_key=True, serialize=False, verbose_name='ID')),
                ('updated_at', models.DateTimeField(auto_now=True, help_text='When this record was last updated (any field).')),
                ('updated_by', models.ForeignKey(blank=True, help_text='User who last updated this record (if known).', null=True, on_delete=django.db.models.deletion.SET_NULL, related_name='updated_ammetrics', to=settings.AUTH_USER_MODEL)),
                ('asset', models.ForeignKey(blank=True, help_text='Optional asset this data belongs to (NULL for global entries).', null=True, on_delete=django.db.models.deletion.CASCADE, related_name='ammetrics', to='am_module.sellerboardeddata')),
            ],
            options={
                'verbose_name': 'AM Data',
                'verbose_name_plural': 'AM Data',
                'ordering': ['-updated_at'],
            },
        ),
        migrations.CreateModel(
            name='BlendedOutcomeModel',
            fields=[
                ('asset', models.OneToOneField(help_text='The boarded asset this blended outcome model belongs to.', on_delete=django.db.models.deletion.CASCADE, primary_key=True, related_name='blended_outcome_model', serialize=False, to='am_module.sellerboardeddata')),
                ('acq_cost', models.DecimalField(blank=True, decimal_places=2, help_text='Acquisition cost (currency).', max_digits=15, null=True)),
                ('expected_total_expenses', models.DecimalField(blank=True, decimal_places=2, help_text='Total projected expenses (currency).', max_digits=15, null=True)),
                ('expected_total_hold', models.IntegerField(blank=True, help_text='Total holding time.', null=True)),
                ('expected_exit_date', models.DateField(blank=True, help_text='Expected exit date (if known).', null=True)),
                ('expected_gross_proceeds', models.DecimalField(blank=True, decimal_places=2, help_text='Expected gross proceeds at exit (currency).', max_digits=15, null=True)),
                ('expected_net_proceeds', models.DecimalField(blank=True, decimal_places=2, help_text='Expected net proceeds at exit (currency).', max_digits=15, null=True)),
                ('expected_pl', models.DecimalField(blank=True, decimal_places=2, help_text='Expected profit/loss (currency).', max_digits=15, null=True)),
                ('expected_cf', models.DecimalField(blank=True, decimal_places=2, help_text='Expected cash flow (currency).', max_digits=15, null=True)),
                ('expected_irr', models.DecimalField(blank=True, decimal_places=4, help_text='Expected IRR stored as percent (0–100).', max_digits=5, null=True)),
                ('expected_moic', models.DecimalField(blank=True, decimal_places=5, help_text='Expected MOIC stored as decimal (0–100).', max_digits=6, null=True)),
                ('expected_npv', models.DecimalField(blank=True, decimal_places=2, help_text='Expected Net Present Value (currency).', max_digits=15, null=True)),
                ('expected_pv', models.DecimalField(blank=True, decimal_places=2, help_text='Expected Present Value (currency).', max_digits=15, null=True)),
                ('outcome_perf', models.DecimalField(blank=True, decimal_places=2, help_text='Weight for Performing outcome (percent 0–100).', max_digits=5, null=True)),
                ('outcome_mod', models.DecimalField(blank=True, decimal_places=2, help_text='Weight for Modification outcome (percent 0–100).', max_digits=5, null=True)),
                ('outcome_fcsale', models.DecimalField(blank=True, decimal_places=2, help_text='Weight for Foreclosure Sale outcome (percent 0–100).', max_digits=5, null=True)),
                ('outcome_dil_asis', models.DecimalField(blank=True, decimal_places=2, help_text='Weight for Deed-in-Lieu (As-Is) outcome (percent 0–100).', max_digits=5, null=True)),
                ('outcome_dil_arv', models.DecimalField(blank=True, decimal_places=2, help_text='Weight for Deed-in-Lieu (ARV) outcome (percent 0–100).', max_digits=5, null=True)),
                ('outcome_reo_asis', models.DecimalField(blank=True, decimal_places=2, help_text='Weight for REO (As-Is) outcome (percent 0–100).', max_digits=5, null=True)),
                ('outcome_reo_arv', models.DecimalField(blank=True, decimal_places=2, help_text='Weight for REO (ARV) outcome (percent 0–100).', max_digits=5, null=True)),
                ('bid_pct_upb', models.DecimalField(blank=True, decimal_places=2, help_text='Bid percentage of UPB (percent 0–100).', max_digits=5, null=True)),
                ('bid_pct_td', models.DecimalField(blank=True, decimal_places=2, help_text='Bid percentage of TD (percent 0–100).', max_digits=5, null=True)),
                ('bid_pct_sellerasis', models.DecimalField(blank=True, decimal_places=2, help_text='Bid percentage of Seller asis (percent 0–100).', max_digits=5, null=True)),
                ('bid_pct_pv', models.DecimalField(blank=True, decimal_places=2, help_text='Bid percentage of present value (percent 0–100).', max_digits=5, null=True)),
                ('cf_p0', models.DecimalField(blank=True, decimal_places=2, help_text='Cash flow period 0 (currency; can be negative). THis will be bid amount plus any period 0 costs', max_digits=15, null=True)),
                ('cf_p1', models.DecimalField(blank=True, decimal_places=2, help_text='Cash flow period 1 (currency; can be negative).', max_digits=15, null=True)),
                ('cf_p2', models.DecimalField(blank=True, decimal_places=2, help_text='Cash flow period 2 (currency; can be negative).', max_digits=15, null=True)),
                ('cf_p3', models.DecimalField(blank=True, decimal_places=2, help_text='Cash flow period 3 (currency; can be negative).', max_digits=15, null=True)),
                ('cf_p4', models.DecimalField(blank=True, decimal_places=2, help_text='Cash flow period 4 (currency; can be negative).', max_digits=15, null=True)),
                ('cf_p5', models.DecimalField(blank=True, decimal_places=2, help_text='Cash flow period 5 (currency; can be negative).', max_digits=15, null=True)),
                ('cf_p6', models.DecimalField(blank=True, decimal_places=2, help_text='Cash flow period 6 (currency; can be negative).', max_digits=15, null=True)),
                ('cf_p7', models.DecimalField(blank=True, decimal_places=2, help_text='Cash flow period 7 (currency; can be negative).', max_digits=15, null=True)),
                ('cf_p8', models.DecimalField(blank=True, decimal_places=2, help_text='Cash flow period 8 (currency; can be negative).', max_digits=15, null=True)),
                ('cf_p9', models.DecimalField(blank=True, decimal_places=2, help_text='Cash flow period 9 (currency; can be negative).', max_digits=15, null=True)),
                ('cf_p10', models.DecimalField(blank=True, decimal_places=2, help_text='Cash flow period 10 (currency; can be negative).', max_digits=15, null=True)),
                ('cf_p11', models.DecimalField(blank=True, decimal_places=2, help_text='Cash flow period 11 (currency; can be negative).', max_digits=15, null=True)),
                ('cf_p12', models.DecimalField(blank=True, decimal_places=2, help_text='Cash flow period 12 (currency; can be negative).', max_digits=15, null=True)),
                ('cf_p13', models.DecimalField(blank=True, decimal_places=2, help_text='Cash flow period 13 (currency; can be negative).', max_digits=15, null=True)),
                ('cf_p14', models.DecimalField(blank=True, decimal_places=2, help_text='Cash flow period 14 (currency; can be negative).', max_digits=15, null=True)),
                ('cf_p15', models.DecimalField(blank=True, decimal_places=2, help_text='Cash flow period 15 (currency; can be negative).', max_digits=15, null=True)),
                ('cf_p16', models.DecimalField(blank=True, decimal_places=2, help_text='Cash flow period 16 (currency; can be negative).', max_digits=15, null=True)),
                ('cf_p17', models.DecimalField(blank=True, decimal_places=2, help_text='Cash flow period 17 (currency; can be negative).', max_digits=15, null=True)),
                ('cf_p18', models.DecimalField(blank=True, decimal_places=2, help_text='Cash flow period 18 (currency; can be negative).', max_digits=15, null=True)),
                ('cf_p19', models.DecimalField(blank=True, decimal_places=2, help_text='Cash flow period 19 (currency; can be negative).', max_digits=15, null=True)),
                ('cf_p20', models.DecimalField(blank=True, decimal_places=2, help_text='Cash flow period 20 (currency; can be negative).', max_digits=15, null=True)),
                ('cf_p21', models.DecimalField(blank=True, decimal_places=2, help_text='Cash flow period 21 (currency; can be negative).', max_digits=15, null=True)),
                ('cf_p22', models.DecimalField(blank=True, decimal_places=2, help_text='Cash flow period 22 (currency; can be negative).', max_digits=15, null=True)),
                ('cf_p23', models.DecimalField(blank=True, decimal_places=2, help_text='Cash flow period 23 (currency; can be negative).', max_digits=15, null=True)),
                ('cf_p24', models.DecimalField(blank=True, decimal_places=2, help_text='Cash flow period 24 (currency; can be negative).', max_digits=15, null=True)),
                ('cf_p25', models.DecimalField(blank=True, decimal_places=2, help_text='Cash flow period 25 (currency; can be negative).', max_digits=15, null=True)),
                ('cf_p26', models.DecimalField(blank=True, decimal_places=2, help_text='Cash flow period 26 (currency; can be negative).', max_digits=15, null=True)),
                ('cf_p27', models.DecimalField(blank=True, decimal_places=2, help_text='Cash flow period 27 (currency; can be negative).', max_digits=15, null=True)),
                ('cf_p28', models.DecimalField(blank=True, decimal_places=2, help_text='Cash flow period 28 (currency; can be negative).', max_digits=15, null=True)),
                ('cf_p29', models.DecimalField(blank=True, decimal_places=2, help_text='Cash flow period 29 (currency; can be negative).', max_digits=15, null=True)),
                ('cf_p30', models.DecimalField(blank=True, decimal_places=2, help_text='Cash flow period 30 (currency; can be negative).', max_digits=15, null=True)),
                ('created_at', models.DateTimeField(auto_now_add=True, help_text='When this boarded data record was created.')),
                ('updated_at', models.DateTimeField(auto_now=True, help_text='When this acquisition model record was last updated.')),
            ],
            options={
                'verbose_name': 'Acquisition Model',
                'verbose_name_plural': 'Acquisition Models',
                'ordering': ['-created_at'],
            },
        ),
        migrations.CreateModel(
            name='AMNote',
            fields=[
                ('id', models.BigAutoField(auto_created=True, primary_key=True, serialize=False, verbose_name='ID')),
                ('body', models.TextField(help_text='Free-form note text for this asset.')),
                ('pinned', models.BooleanField(default=False, help_text='Pin this note for prominence in UI.')),
                ('created_at', models.DateTimeField(auto_now_add=True, help_text='When this note was created.')),
                ('updated_at', models.DateTimeField(auto_now=True, help_text='When this note was last updated.')),
                ('created_by', models.ForeignKey(blank=True, help_text='User who created this note (if known).', null=True, on_delete=django.db.models.deletion.SET_NULL, related_name='created_am_notes', to=settings.AUTH_USER_MODEL)),
                ('updated_by', models.ForeignKey(blank=True, help_text='User who last updated this note (if known).', null=True, on_delete=django.db.models.deletion.SET_NULL, related_name='updated_am_notes', to=settings.AUTH_USER_MODEL)),
                ('seller_boarded_data', models.ForeignKey(help_text='The SellerBoardedData this note belongs to.', on_delete=django.db.models.deletion.CASCADE, related_name='am_notes', to='am_module.sellerboardeddata')),
            ],
            options={
                'ordering': ['-pinned', '-updated_at', '-id'],
            },
        ),
        migrations.CreateModel(
            name='FCSale',
            fields=[
                ('id', models.BigAutoField(auto_created=True, primary_key=True, serialize=False, verbose_name='ID')),
                ('fc_sale_sched_date', models.DateField(blank=True, help_text='Scheduled date of the foreclosure sale (optional).', null=True)),
                ('fc_sale_actual_date', models.DateField(blank=True, help_text='Actual date of the foreclosure sale (optional).', null=True)),
                ('fc_bid_price', models.DecimalField(blank=True, decimal_places=2, help_text='Bid price of the foreclosure sale (optional).', max_digits=10, null=True)),
                ('fc_sale_price', models.DecimalField(blank=True, decimal_places=2, help_text='Sale price of the foreclosure sale (optional).', max_digits=10, null=True)),
                ('asset', models.OneToOneField(help_text='The boarded asset this foreclosure sale belongs to.', on_delete=django.db.models.deletion.CASCADE, related_name='fc_sale', to='am_module.sellerboardeddata')),
                ('legal_crm', models.ForeignKey(blank=True, help_text='Legal entity/contact from CRM associated with this foreclosure sale (optional).', null=True, on_delete=django.db.models.deletion.SET_NULL, related_name='fc_sales', to='core.legalcrm')),
            ],
        ),
        migrations.CreateModel(
            name='REOData',
            fields=[
                ('id', models.BigAutoField(auto_created=True, primary_key=True, serialize=False, verbose_name='ID')),
                ('list_price', models.DecimalField(blank=True, decimal_places=2, help_text='List price of the REO property (optional).', max_digits=10, null=True)),
                ('list_date', models.DateField(blank=True, help_text='Date the property was listed (optional).', null=True)),
                ('under_contract_flag', models.BooleanField(default=False, help_text='Whether the property is under contract (optional).')),
                ('under_contract_date', models.DateField(blank=True, help_text='Date the property went under contract (optional).', null=True)),
                ('contract_price', models.DecimalField(blank=True, decimal_places=2, help_text='Contract price of the REO property (optional).', max_digits=10, null=True)),
                ('estimated_close_date', models.DateField(blank=True, help_text='Estimated close date of the REO property (optional).', null=True)),
                ('actual_close_date', models.DateField(blank=True, help_text='Actual close date of the REO property (optional).', null=True)),
                ('seller_credit_amt', models.DecimalField(blank=True, decimal_places=2, help_text='Seller credit amount (optional).', max_digits=10, null=True)),
                ('purchase_type', models.CharField(blank=True, choices=[('cash', 'Cash'), ('financing', 'Financing'), ('seller_financing', 'Seller Financing')], help_text='How the property was purchased (Cash, Financing, Seller Financing).', max_length=32, null=True)),
                ('gross_purchase_price', models.DecimalField(blank=True, decimal_places=2, help_text='Gross purchase price of the REO property (optional).', max_digits=10, null=True)),
                ('asset', models.OneToOneField(help_text='The boarded asset this REO data belongs to.', on_delete=django.db.models.deletion.CASCADE, related_name='reo_data', to='am_module.sellerboardeddata')),
                ('broker_crm', models.OneToOneField(blank=True, help_text='Linked Broker CRM contact for this REO asset (optional).', null=True, on_delete=django.db.models.deletion.SET_NULL, related_name='reo_record', to='core.brokercrm')),
            ],
        ),
        migrations.CreateModel(
            name='AMMetricsChange',
            fields=[
                ('id', models.BigAutoField(auto_created=True, primary_key=True, serialize=False, verbose_name='ID')),
                ('field_name', models.CharField(help_text='Field name that was updated.', max_length=64)),
                ('old_value', models.TextField(blank=True, help_text='Previous value (as text/JSON).', null=True)),
                ('new_value', models.TextField(blank=True, help_text='New value (as text/JSON).', null=True)),
                ('changed_at', models.DateTimeField(auto_now_add=True, help_text='When the change occurred.')),
                ('changed_by', models.ForeignKey(blank=True, help_text='User who made the change (if known).', null=True, on_delete=django.db.models.deletion.SET_NULL, related_name='ammetrics_changes', to=settings.AUTH_USER_MODEL)),
                ('record', models.ForeignKey(help_text='The metrics record this change belongs to.', on_delete=django.db.models.deletion.CASCADE, related_name='changes', to='am_module.ammetrics')),
            ],
            options={
                'ordering': ['-changed_at', '-id'],
                'indexes': [models.Index(fields=['record', 'changed_at'], name='am_module_a_record__db193f_idx'), models.Index(fields=['field_name', 'changed_at'], name='am_module_a_field_n_3e7084_idx')],
            },
        ),
        migrations.CreateModel(
            name='AssetMetrics',
            fields=[
                ('asset', models.OneToOneField(help_text='The boarded asset this metrics record belongs to.', on_delete=django.db.models.deletion.CASCADE, primary_key=True, related_name='metrics', serialize=False, to='am_module.sellerboardeddata')),
                ('purchase_date', models.DateField(help_text='The date the asset was purchased (required).')),
                ('created_at', models.DateTimeField(auto_now_add=True, help_text='When this metrics record was created.')),
                ('updated_at', models.DateTimeField(auto_now=True, help_text='When this metrics record was last updated.')),
            ],
            options={
                'verbose_name': 'Asset Metrics',
                'verbose_name_plural': 'Asset Metrics',
                'ordering': ['-created_at'],
                'indexes': [models.Index(fields=['purchase_date'], name='am_module_a_purchas_41ac41_idx')],
            },
        ),
        migrations.AddIndex(
            model_name='sellerboardeddata',
            index=models.Index(fields=['id'], name='am_module_s_id_c9db5e_idx'),
        ),
        migrations.AddIndex(
            model_name='sellerboardeddata',
            index=models.Index(fields=['asset_status'], name='am_module_s_asset_s_446f35_idx'),
        ),
        migrations.AddIndex(
            model_name='sellerboardeddata',
            index=models.Index(fields=['acq_seller_id'], name='am_module_s_acq_sel_57d6c0_idx'),
        ),
        migrations.AddIndex(
            model_name='sellerboardeddata',
            index=models.Index(fields=['acq_trade_id'], name='am_module_s_acq_tra_fbd059_idx'),
        ),
        migrations.AddIndex(
            model_name='sellerboardeddata',
            index=models.Index(fields=['state'], name='am_module_s_state_5eed58_idx'),
        ),
        migrations.AddIndex(
            model_name='sellerboardeddata',
            index=models.Index(fields=['sellertape_id'], name='am_module_s_sellert_abc9bf_idx'),
        ),
        migrations.AddIndex(
            model_name='amnote',
            index=models.Index(fields=['seller_boarded_data', 'pinned', 'updated_at'], name='am_module_a_seller__8b0310_idx'),
        ),
        migrations.AddIndex(
            model_name='ammetrics',
            index=models.Index(fields=['asset'], name='am_module_a_asset_i_70cfbb_idx'),
        ),
    ]
