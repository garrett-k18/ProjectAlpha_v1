# Generated by Django 5.2.5 on 2025-09-17 19:56

import django.core.validators
import django.db.models.deletion
from decimal import Decimal
from django.db import migrations, models


class Migration(migrations.Migration):

    initial = True

    dependencies = [
        ('acq_module', '0001_initial'),
    ]

    operations = [
        migrations.CreateModel(
            name='DebtFacility',
            fields=[
                ('id', models.BigAutoField(auto_created=True, primary_key=True, serialize=False, verbose_name='ID')),
                ('facility_name', models.CharField(max_length=255)),
                ('firm_name', models.CharField(max_length=255)),
                ('firm_email', models.EmailField(max_length=254, null=True)),
                ('firm_phone', models.CharField(max_length=255, null=True)),
                ('commitment_size', models.DecimalField(decimal_places=2, max_digits=18, null=True, validators=[django.core.validators.MinValueValidator(Decimal('0'))])),
                ('rate_index', models.CharField(default='SOFR', max_length=16, null=True)),
                ('sofr_rate', models.DecimalField(blank=True, decimal_places=4, max_digits=6, null=True, validators=[django.core.validators.MinValueValidator(Decimal('0'))])),
                ('spread_bps', models.PositiveIntegerField(null=True)),
                ('start_date', models.DateField(null=True)),
                ('end_date', models.DateField(null=True)),
                ('created_at', models.DateTimeField(auto_now_add=True)),
                ('updated_at', models.DateTimeField(auto_now=True)),
            ],
            options={
                'verbose_name': 'Debt Facility',
                'verbose_name_plural': 'Debt Facilities',
                'db_table': 'debt_facility',
                'ordering': ['-created_at'],
                'managed': True,
            },
        ),
        migrations.CreateModel(
            name='JVEquityPartner',
            fields=[
                ('id', models.BigAutoField(auto_created=True, primary_key=True, serialize=False, verbose_name='ID')),
                ('jv_name', models.CharField(max_length=255)),
                ('partner_firm_name', models.CharField(max_length=255)),
                ('partner_firm_email', models.EmailField(max_length=254, null=True)),
                ('partner_firm_phone', models.CharField(max_length=255, null=True)),
                ('commitment_size', models.DecimalField(decimal_places=2, max_digits=18, null=True, validators=[django.core.validators.MinValueValidator(Decimal('0'))])),
                ('lp_percentage', models.PositiveIntegerField(null=True)),
                ('gp_percentage', models.PositiveIntegerField(null=True)),
                ('lp_promote', models.PositiveIntegerField(null=True)),
                ('gp_promote', models.PositiveIntegerField(null=True)),
                ('lp_contribution_paydown', models.DecimalField(decimal_places=2, max_digits=18, null=True, validators=[django.core.validators.MinValueValidator(Decimal('0'))])),
                ('gp_contribution_paydown', models.DecimalField(decimal_places=2, max_digits=18, null=True, validators=[django.core.validators.MinValueValidator(Decimal('0'))])),
                ('lp_pref', models.DecimalField(decimal_places=2, max_digits=18, null=True, validators=[django.core.validators.MinValueValidator(Decimal('0'))])),
                ('am_fees', models.DecimalField(decimal_places=2, max_digits=18, null=True, validators=[django.core.validators.MinValueValidator(Decimal('0'))])),
                ('acq_fees', models.DecimalField(decimal_places=2, max_digits=18, null=True, validators=[django.core.validators.MinValueValidator(Decimal('0'))])),
                ('fund_start_date', models.DateField(null=True)),
                ('fund_maturity_date', models.DateField(null=True)),
            ],
            options={
                'verbose_name': 'Equity Partner',
                'verbose_name_plural': 'Equity Partners',
                'db_table': 'equity_partner',
                'managed': True,
            },
        ),
        migrations.CreateModel(
            name='AssetIdHub',
            fields=[
                ('id', models.BigAutoField(auto_created=True, primary_key=True, serialize=False, verbose_name='ID')),
                ('sellertape_id', models.CharField(blank=True, db_index=True, max_length=64, null=True)),
                ('created_at', models.DateTimeField(auto_now_add=True)),
                ('updated_at', models.DateTimeField(auto_now=True)),
            ],
            options={
                'verbose_name': 'Asset ID Hub',
                'verbose_name_plural': 'Asset ID Hub',
                'db_table': 'core_assetidhub',
                'ordering': ['-created_at'],
                'indexes': [models.Index(fields=['sellertape_id'], name='core_asseti_sellert_86d816_idx')],
            },
        ),
        migrations.CreateModel(
            name='Brokercrm',
            fields=[
                ('id', models.BigAutoField(auto_created=True, primary_key=True, serialize=False, verbose_name='ID')),
                ('broker_firm', models.CharField(blank=True, max_length=255, null=True)),
                ('broker_state', models.CharField(blank=True, max_length=2, null=True)),
                ('broker_city', models.CharField(blank=True, max_length=255, null=True)),
                ('broker_email', models.EmailField(blank=True, max_length=254, null=True)),
                ('broker_phone', models.CharField(blank=True, max_length=255, null=True)),
                ('broker_name', models.CharField(blank=True, max_length=255, null=True)),
                ('created_at', models.DateTimeField(auto_now_add=True)),
            ],
            options={
                'verbose_name': 'Broker',
                'verbose_name_plural': 'Brokers',
                'ordering': ['-created_at'],
                'indexes': [models.Index(fields=['broker_state'], name='core_broker_broker__f9180f_idx'), models.Index(fields=['broker_email'], name='core_broker_broker__b82b1c_idx')],
            },
        ),
        migrations.CreateModel(
            name='LegalCRM',
            fields=[
                ('id', models.BigAutoField(auto_created=True, primary_key=True, serialize=False, verbose_name='ID')),
                ('firm_name', models.CharField(blank=True, max_length=255, null=True)),
                ('contact_name', models.CharField(blank=True, max_length=255, null=True)),
                ('email', models.EmailField(blank=True, max_length=254, null=True)),
                ('phone', models.CharField(blank=True, max_length=255, null=True)),
                ('created_at', models.DateTimeField(auto_now_add=True)),
            ],
            options={
                'verbose_name': 'Legal Entity',
                'verbose_name_plural': 'Legal Entities',
                'ordering': ['-created_at'],
                'indexes': [models.Index(fields=['email'], name='core_legalc_email_0fe955_idx'), models.Index(fields=['firm_name'], name='core_legalc_firm_na_6cd04e_idx')],
            },
        ),
        migrations.CreateModel(
            name='Servicer',
            fields=[
                ('id', models.BigAutoField(auto_created=True, primary_key=True, serialize=False, verbose_name='ID')),
                ('servicer_name', models.CharField(max_length=100, unique=True)),
                ('contact_name', models.CharField(max_length=100)),
                ('contact_email', models.EmailField(max_length=254)),
                ('contact_phone', models.CharField(max_length=20)),
                ('servicing_transfer_duration', models.IntegerField()),
                ('board_fee', models.DecimalField(decimal_places=2, max_digits=10)),
                ('current_fee', models.DecimalField(decimal_places=2, max_digits=10)),
                ('thirtday_fee', models.DecimalField(decimal_places=2, max_digits=10)),
                ('sixtyday_fee', models.DecimalField(decimal_places=2, max_digits=10)),
                ('ninetyday_fee', models.DecimalField(decimal_places=2, max_digits=10)),
                ('onetwentyday_fee', models.DecimalField(decimal_places=2, max_digits=10)),
                ('fc_fee', models.DecimalField(decimal_places=2, max_digits=10)),
                ('bk_fee', models.DecimalField(decimal_places=2, max_digits=10)),
                ('mod_fee', models.DecimalField(decimal_places=2, max_digits=10)),
                ('dil_fee', models.DecimalField(decimal_places=2, max_digits=10)),
                ('thirdparty_fee', models.DecimalField(decimal_places=2, max_digits=10)),
                ('reo_fee', models.DecimalField(decimal_places=2, max_digits=10)),
                ('reo_days', models.IntegerField()),
                ('liqfee_pct', models.DecimalField(decimal_places=2, max_digits=10)),
                ('liqfee_flat', models.DecimalField(decimal_places=2, max_digits=10)),
                ('created_at', models.DateTimeField(auto_now_add=True)),
                ('updated_at', models.DateTimeField(auto_now=True)),
            ],
            options={
                'verbose_name': 'Servicer',
                'verbose_name_plural': 'Servicers',
                'db_table': 'servicers',
                'ordering': ['servicer_name'],
                'indexes': [models.Index(fields=['servicer_name'], name='servicers_service_f132f6_idx')],
            },
        ),
        migrations.CreateModel(
            name='StateReference',
            fields=[
                ('state_code', models.CharField(max_length=2, primary_key=True, serialize=False)),
                ('state_name', models.CharField(max_length=50)),
                ('judicialvsnonjudicial', models.BooleanField(default=False, help_text='Is this a judicial foreclosure state')),
                ('fc_state_months', models.IntegerField(help_text='Average months to complete foreclosure')),
                ('eviction_duration', models.IntegerField(help_text='Average months to complete eviction')),
                ('rehab_duration', models.IntegerField(help_text='Average months to complete rehab')),
                ('reo_marketing_duration', models.IntegerField(help_text='Average months to complete reo marketing')),
                ('reo_local_market_ext_duration', models.IntegerField(help_text='Average months to complete reo local market extension')),
                ('dil_duration_avg', models.IntegerField(help_text='Average months to complete dilution')),
                ('property_tax_rate', models.DecimalField(decimal_places=4, help_text='Average property tax rate', max_digits=5)),
                ('transfer_tax_rate', models.DecimalField(decimal_places=4, help_text='Tax rate for property transfers', max_digits=5)),
                ('insurance_rate_avg', models.DecimalField(decimal_places=4, help_text='Average insurance rate', max_digits=5)),
                ('fc_legal_fees_avg', models.DecimalField(decimal_places=2, help_text='Average legal fees for foreclosure', max_digits=10)),
                ('dil_cost_avg', models.DecimalField(decimal_places=2, help_text='Average dilution cost', max_digits=10)),
                ('cfk_cost_avg', models.DecimalField(decimal_places=2, help_text='Average CFK cost', max_digits=10)),
                ('value_adjustment_annual', models.DecimalField(decimal_places=4, help_text='Average value adjustment', max_digits=10)),
                ('created_at', models.DateTimeField(auto_now_add=True)),
                ('updated_at', models.DateTimeField(auto_now=True)),
            ],
            options={
                'verbose_name': 'State Reference',
                'verbose_name_plural': 'State References',
                'db_table': 'state_reference',
                'ordering': ['state_name'],
                'indexes': [models.Index(fields=['state_code'], name='state_refer_state_c_df5719_idx')],
            },
        ),
        migrations.CreateModel(
            name='TradingPartnerCRM',
            fields=[
                ('id', models.BigAutoField(auto_created=True, primary_key=True, serialize=False, verbose_name='ID')),
                ('firm', models.CharField(help_text='Firm or organization name for the trading partner.', max_length=255)),
                ('name', models.CharField(blank=True, help_text="Primary contact person's full name.", max_length=255, null=True)),
                ('email', models.EmailField(blank=True, help_text='Primary contact email address.', max_length=254, null=True)),
                ('phone', models.CharField(blank=True, help_text='Primary contact phone number (free-form, include country code if applicable).', max_length=255, null=True)),
                ('altname', models.CharField(blank=True, help_text="Alternate contact person's full name.", max_length=255, null=True)),
                ('altemail', models.EmailField(blank=True, help_text='Alternate contact email address.', max_length=254, null=True)),
                ('alt_phone', models.CharField(blank=True, help_text='Alternate contact phone number.', max_length=255, null=True)),
                ('nda_flag', models.BooleanField(default=False, help_text='Whether an NDA is required/expected with this partner.')),
                ('nda_signed', models.DateField(blank=True, help_text='Date the NDA was fully executed (leave blank if not signed).', null=True)),
                ('created_at', models.DateTimeField(auto_now_add=True)),
            ],
            options={
                'verbose_name': 'Trading Partner',
                'verbose_name_plural': 'Trading Partners',
                'ordering': ['-created_at'],
                'indexes': [models.Index(fields=['email'], name='core_tradin_email_bd1418_idx'), models.Index(fields=['firm'], name='core_tradin_firm_e6a5a8_idx')],
            },
        ),
        migrations.CreateModel(
            name='LlDataEnrichment',
            fields=[
                ('id', models.BigAutoField(auto_created=True, primary_key=True, serialize=False, verbose_name='ID')),
                ('geocode_lat', models.DecimalField(blank=True, decimal_places=6, max_digits=9, null=True)),
                ('geocode_lng', models.DecimalField(blank=True, decimal_places=6, max_digits=9, null=True)),
                ('geocode_used_address', models.CharField(blank=True, max_length=255, null=True)),
                ('geocode_full_address', models.CharField(blank=True, max_length=255, null=True)),
                ('geocode_display_address', models.CharField(blank=True, max_length=255, null=True)),
                ('geocoded_at', models.DateTimeField(blank=True, null=True)),
                ('geocode_county', models.CharField(blank=True, max_length=255, null=True)),
                ('geocode_msa', models.CharField(blank=True, max_length=255, null=True)),
                ('created_at', models.DateTimeField(auto_now_add=True)),
                ('updated_at', models.DateTimeField(auto_now=True)),
                ('asset_hub', models.OneToOneField(blank=True, help_text='1:1 hub link for this enrichment (mirror of seller_raw_data.asset_hub).', null=True, on_delete=django.db.models.deletion.SET_NULL, related_name='enrichment', to='core.assetidhub')),
                ('seller_raw_data', models.OneToOneField(on_delete=django.db.models.deletion.CASCADE, related_name='enrichment', to='acq_module.sellerrawdata')),
            ],
            options={
                'verbose_name': 'Loan Level Data Enrichment',
                'verbose_name_plural': 'Loan Level Data Enrichments',
                'db_table': 'acq_ll_data_enrichment',
                'ordering': ['-created_at'],
                'indexes': [models.Index(fields=['seller_raw_data'], name='acq_ll_data_seller__cbb3b3_idx'), models.Index(fields=['geocode_lat', 'geocode_lng'], name='acq_ll_data_geocode_476637_idx')],
            },
        ),
    ]
