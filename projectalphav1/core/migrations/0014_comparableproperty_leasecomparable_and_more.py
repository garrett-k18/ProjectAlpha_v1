# Generated by Django 5.2.5 on 2025-10-06 20:02

import django.db.models.deletion
from django.db import migrations, models


class Migration(migrations.Migration):

    dependencies = [
        ('core', '0013_rentroll_unitmix'),
    ]

    operations = [
        migrations.CreateModel(
            name='ComparableProperty',
            fields=[
                ('id', models.BigAutoField(auto_created=True, primary_key=True, serialize=False, verbose_name='ID')),
                ('as_of_date', models.DateField(help_text='Date the comparable was ascertained.')),
                ('property_name', models.CharField(blank=True, help_text='Name of the comparable property (e.g., apartment complex name).', max_length=255, null=True)),
                ('street_address', models.CharField(help_text='Street address of the comparable property.', max_length=255)),
                ('city', models.CharField(help_text='City of the comparable property.', max_length=100)),
                ('state', models.CharField(help_text='State of the comparable property.', max_length=2)),
                ('zip_code', models.CharField(help_text='Zip code of the comparable property.', max_length=10)),
                ('distance_from_subject', models.IntegerField(blank=True, help_text='Distance from the subject property in feet.', null=True)),
                ('property_type', models.CharField(blank=True, help_text='Type of the comparable property (e.g., SFR, Multi-Family, Retail).', max_length=100, null=True)),
                ('property_style', models.CharField(blank=True, help_text='Style of the comparable property (e.g., Colonial, Ranch).', max_length=100, null=True)),
                ('beds', models.IntegerField(blank=True, help_text='Number of bedrooms.', null=True)),
                ('baths', models.DecimalField(blank=True, decimal_places=1, help_text='Number of bathrooms (e.g., 2.5).', max_digits=4, null=True)),
                ('units', models.IntegerField(blank=True, help_text='Number of units in the property.', null=True)),
                ('gross_square_ft_building', models.IntegerField(blank=True, help_text='For commercial...this is total sq feet including common areas. Gross square footage of the building.', null=True)),
                ('livable_square_ft_building', models.IntegerField(blank=True, help_text='Livable square footage of the building/ if SFR or non commercial this is just the basic total sq feet.', null=True)),
                ('year_built', models.IntegerField(blank=True, help_text='Year the property was built.', null=True)),
                ('total_lot_size', models.IntegerField(blank=True, help_text='Total lot size in square feet.', null=True)),
                ('market_type', models.CharField(blank=True, help_text='Type of the market (e.g., SFR, Multi-Family, Retail).', max_length=100, null=True)),
                ('submarket', models.CharField(blank=True, help_text='Submarket of the comparable property.', max_length=100, null=True)),
                ('building_class', models.CharField(blank=True, help_text='Building class of the comparable property.', max_length=100, null=True)),
                ('notes', models.TextField(blank=True, help_text='Additional notes about this comparable.', null=True)),
                ('created_at', models.DateTimeField(auto_now_add=True)),
                ('updated_at', models.DateTimeField(auto_now=True)),
                ('asset_hub', models.ForeignKey(help_text='Link to hub; multiple comparables per asset are supported.', on_delete=django.db.models.deletion.CASCADE, related_name='comparable_properties', to='core.assetidhub')),
            ],
            options={
                'verbose_name': 'Comparable Property',
                'verbose_name_plural': 'Comparable Properties',
                'db_table': 'core_comparable_property',
                'ordering': ['-as_of_date', 'street_address'],
            },
        ),
        migrations.CreateModel(
            name='LeaseComparable',
            fields=[
                ('id', models.BigAutoField(auto_created=True, primary_key=True, serialize=False, verbose_name='ID')),
                ('monthly_rent', models.DecimalField(blank=True, decimal_places=2, help_text='Monthly rent amount.', max_digits=10, null=True)),
                ('lease_start_date', models.DateField(blank=True, help_text='Lease start date.', null=True)),
                ('lease_end_date', models.DateField(blank=True, help_text='Lease end date.', null=True)),
                ('lease_term_months', models.IntegerField(blank=True, help_text='Lease term in months.', null=True)),
                ('lease_type', models.CharField(blank=True, help_text='Type of lease (e.g., NNN, Gross, Modified Gross).', max_length=50, null=True)),
                ('lease_escalation', models.DecimalField(blank=True, decimal_places=2, help_text='Lease escalation percentage.', max_digits=10, null=True)),
                ('lease_escalation_frequency', models.CharField(blank=True, help_text='Lease escalation frequency (e.g., Annual, Semi-Annual, Quarterly).', max_length=50, null=True)),
                ('cam_monthly', models.DecimalField(blank=True, decimal_places=2, help_text='Monthly CAM charge.', max_digits=10, null=True)),
                ('comp_rating', models.PositiveSmallIntegerField(blank=True, choices=[(1, '1 - Poor'), (2, '2 - Fair'), (3, '3 - Average'), (4, '4 - Good'), (5, '5 - Excellent')], help_text='Lease comp quality: 1 (poor match) to 5 (excellent match). Based on rent similarity, lease terms, amenities, location.', null=True)),
                ('created_at', models.DateTimeField(auto_now_add=True)),
                ('updated_at', models.DateTimeField(auto_now=True)),
                ('comparable_property', models.OneToOneField(help_text='Link to parent comparable property.', on_delete=django.db.models.deletion.CASCADE, related_name='lease_data', to='core.comparableproperty')),
            ],
            options={
                'verbose_name': 'Lease Comparable',
                'verbose_name_plural': 'Lease Comparables',
                'db_table': 'core_lease_comparable',
                'ordering': ['-lease_start_date'],
            },
        ),
        migrations.CreateModel(
            name='LeaseComparableRentRoll',
            fields=[
                ('id', models.BigAutoField(auto_created=True, primary_key=True, serialize=False, verbose_name='ID')),
                ('unit_number', models.CharField(blank=True, help_text='Unit number or identifier (e.g., "101", "2A", "Suite 200").', max_length=50, null=True)),
                ('beds', models.IntegerField(blank=True, help_text='Number of bedrooms in this unit (overrides property-level if specified).', null=True)),
                ('baths', models.DecimalField(blank=True, decimal_places=1, help_text='Number of bathrooms in this unit (e.g., 2.5).', max_digits=4, null=True)),
                ('unit_sqft', models.IntegerField(blank=True, help_text='Square footage of this unit.', null=True)),
                ('monthly_rent', models.DecimalField(blank=True, decimal_places=2, help_text='Monthly rent for this unit.', max_digits=10, null=True)),
                ('lease_start_date', models.DateField(blank=True, help_text='Lease start date for this unit.', null=True)),
                ('lease_end_date', models.DateField(blank=True, help_text='Lease end date for this unit.', null=True)),
                ('lease_term_months', models.IntegerField(blank=True, help_text='Lease term in months for this unit.', null=True)),
                ('lease_type', models.CharField(blank=True, help_text='Type of lease for this unit (e.g., NNN, Gross, Modified Gross).', max_length=50, null=True)),
                ('lease_escalation', models.DecimalField(blank=True, decimal_places=2, help_text='Lease escalation percentage for this unit (e.g., 3.00 for 3%).', max_digits=5, null=True)),
                ('lease_escalation_frequency', models.CharField(blank=True, help_text='Escalation frequency (e.g., Annual, Semi-Annual, Quarterly).', max_length=50, null=True)),
                ('cam_monthly', models.DecimalField(blank=True, decimal_places=2, help_text='Monthly CAM charge for this unit.', max_digits=10, null=True)),
                ('is_occupied', models.BooleanField(default=True, help_text='Whether this unit is currently occupied.')),
                ('tenant_name', models.CharField(blank=True, help_text='Tenant name (optional, for tracking).', max_length=255, null=True)),
                ('notes', models.TextField(blank=True, help_text='Additional notes about this unit lease.', null=True)),
                ('created_at', models.DateTimeField(auto_now_add=True)),
                ('updated_at', models.DateTimeField(auto_now=True)),
                ('comparable_property', models.ForeignKey(help_text='Link to parent comparable property; multiple units per property supported.', on_delete=django.db.models.deletion.CASCADE, related_name='lease_units', to='core.comparableproperty')),
            ],
            options={
                'verbose_name': 'Lease Comparable Unit',
                'verbose_name_plural': 'Lease Comparable Units',
                'db_table': 'core_lease_comparable_unit',
                'ordering': ['comparable_property', 'unit_number'],
            },
        ),
        migrations.CreateModel(
            name='LeaseComparableUnitMix',
            fields=[
                ('id', models.BigAutoField(auto_created=True, primary_key=True, serialize=False, verbose_name='ID')),
                ('unit_type', models.CharField(help_text="Type of unit (e.g., '1BR', '2BR', 'Studio', 'Retail', 'Office')", max_length=50)),
                ('unit_count', models.IntegerField(help_text='Number of units of this type')),
                ('unit_avg_sqft', models.IntegerField(help_text='Average square footage per unit of this type')),
                ('unit_avg_rent', models.DecimalField(decimal_places=2, help_text='Average monthly rent per unit of this type', max_digits=10)),
                ('price_sqft', models.DecimalField(blank=True, decimal_places=2, editable=False, help_text='Calculated: unit_avg_rent / unit_avg_sqft (rent per sqft)', max_digits=10, null=True)),
                ('notes', models.TextField(blank=True, help_text='Additional notes about this unit type', null=True)),
                ('created_at', models.DateTimeField(auto_now_add=True)),
                ('updated_at', models.DateTimeField(auto_now=True)),
                ('comparable_property', models.ForeignKey(help_text='Link to parent comparable property; multiple unit types per property supported.', on_delete=django.db.models.deletion.CASCADE, related_name='lease_unit_mix', to='core.comparableproperty')),
            ],
            options={
                'verbose_name': 'Lease Comparable Unit Mix',
                'verbose_name_plural': 'Lease Comparable Unit Mix Records',
                'db_table': 'core_lease_comparable_unit_mix',
                'ordering': ['comparable_property', 'unit_type'],
            },
        ),
        migrations.CreateModel(
            name='SalesComparable',
            fields=[
                ('id', models.BigAutoField(auto_created=True, primary_key=True, serialize=False, verbose_name='ID')),
                ('current_listed_price', models.DecimalField(blank=True, decimal_places=2, help_text='Current listed price of the comparable property.', max_digits=15, null=True)),
                ('current_listed_date', models.DateField(blank=True, help_text='Current listed date of the comparable property.', null=True)),
                ('last_sales_price', models.DecimalField(blank=True, decimal_places=2, help_text='Last sales price of the comparable property.', max_digits=15, null=True)),
                ('last_sales_date', models.DateField(blank=True, help_text='Last sales date of the comparable property.', null=True)),
                ('comp_rating', models.PositiveSmallIntegerField(blank=True, choices=[(1, '1 - Poor'), (2, '2 - Fair'), (3, '3 - Average'), (4, '4 - Good'), (5, '5 - Excellent')], help_text='Sales comp quality: 1 (poor match) to 5 (excellent match). Based on distance, bed/bath, sale recency, price similarity.', null=True)),
                ('created_at', models.DateTimeField(auto_now_add=True)),
                ('updated_at', models.DateTimeField(auto_now=True)),
                ('comparable_property', models.OneToOneField(help_text='Link to parent comparable property.', on_delete=django.db.models.deletion.CASCADE, related_name='sales_data', to='core.comparableproperty')),
            ],
            options={
                'verbose_name': 'Sales Comparable',
                'verbose_name_plural': 'Sales Comparables',
                'db_table': 'core_sales_comparable',
                'ordering': ['-last_sales_date'],
            },
        ),
        migrations.AddIndex(
            model_name='comparableproperty',
            index=models.Index(fields=['asset_hub', 'as_of_date'], name='core_compar_asset_h_b4fafe_idx'),
        ),
        migrations.AddIndex(
            model_name='comparableproperty',
            index=models.Index(fields=['property_type'], name='core_compar_propert_5bf217_idx'),
        ),
        migrations.AddIndex(
            model_name='leasecomparablerentroll',
            index=models.Index(fields=['comparable_property', 'unit_number'], name='core_lease__compara_c5dc24_idx'),
        ),
        migrations.AddIndex(
            model_name='leasecomparablerentroll',
            index=models.Index(fields=['is_occupied'], name='core_lease__is_occu_3ea583_idx'),
        ),
        migrations.AddIndex(
            model_name='leasecomparableunitmix',
            index=models.Index(fields=['comparable_property', 'unit_type'], name='core_lease__compara_31c18a_idx'),
        ),
    ]
