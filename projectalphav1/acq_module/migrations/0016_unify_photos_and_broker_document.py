# Generated by Cascade custom migration
from django.db import migrations, models
import django.db.models.deletion
import acq_module.models.valuations


class Migration(migrations.Migration):

    dependencies = [
        ('acq_module', '0015_alter_brokerphoto_photo'),
    ]

    operations = [
        # Create unified Photo model
        migrations.CreateModel(
            name='Photo',
            fields=[
                ('id', models.BigAutoField(auto_created=True, primary_key=True, serialize=False, verbose_name='ID')),
                ('image', models.ImageField(help_text='Uploaded image file.', upload_to=acq_module.models.valuations.get_photo_path)),
                ('source_tag', models.CharField(choices=[('broker', 'Broker'), ('document', 'Document'), ('public', 'Public'), ('internal', 'Internal')], help_text='Origin tag for the photo.', max_length=20)),
                ('caption', models.CharField(blank=True, max_length=255, null=True)),
                ('is_primary', models.BooleanField(default=False)),
                ('source_document_name', models.CharField(blank=True, max_length=255, null=True)),
                ('source_document_type', models.CharField(blank=True, max_length=20, null=True)),
                ('page_number', models.IntegerField(blank=True, null=True)),
                ('bbox', models.JSONField(blank=True, null=True)),
                ('extraction_confidence', models.DecimalField(blank=True, decimal_places=2, max_digits=5, null=True)),
                ('source_tool', models.CharField(blank=True, max_length=100, null=True)),
                ('source_url', models.URLField(blank=True, null=True)),
                ('created_at', models.DateTimeField(auto_now_add=True)),
                ('seller_raw_data', models.ForeignKey(help_text='SellerRawData record this photo belongs to.', on_delete=django.db.models.deletion.CASCADE, related_name='photos', to='acq_module.sellerrawdata')),
            ],
            options={
                'db_table': 'acq_photo',
                'ordering': ['-created_at'],
                'verbose_name': 'Photo',
                'verbose_name_plural': 'Photos',
            },
        ),
        migrations.AddIndex(
            model_name='photo',
            index=models.Index(fields=['seller_raw_data'], name='acq_photo_seller_idx'),
        ),
        migrations.AddIndex(
            model_name='photo',
            index=models.Index(fields=['source_tag'], name='acq_photo_source_tag_idx'),
        ),

        # Create BrokerDocument table if not exists yet
        migrations.CreateModel(
            name='BrokerDocument',
            fields=[
                ('id', models.BigAutoField(auto_created=True, primary_key=True, serialize=False, verbose_name='ID')),
                ('file', models.FileField(help_text='Uploaded document file.', upload_to=acq_module.models.valuations.get_broker_document_path)),
                ('original_name', models.CharField(blank=True, max_length=255, null=True)),
                ('uploaded_at', models.DateTimeField(auto_now_add=True)),
                ('broker_valuation', models.ForeignKey(on_delete=django.db.models.deletion.CASCADE, related_name='documents', to='acq_module.brokervalues')),
            ],
            options={
                'db_table': 'acq_broker_document',
                'ordering': ['uploaded_at'],
                'verbose_name': 'Broker Document',
                'verbose_name_plural': 'Broker Documents',
            },
        ),

        # Data backfill from old tables into unified Photo
        migrations.RunSQL(
            sql=(
                "INSERT INTO acq_photo (seller_raw_data_id, image, source_tag, caption, is_primary, source_url, created_at)\n"
                "SELECT seller_raw_data_id, photo, 'public', caption, is_primary, source_url, COALESCE(scraped_at, CURRENT_TIMESTAMP)\n"
                "FROM acq_public_photo;"
            ),
            reverse_sql=("DELETE FROM acq_photo WHERE source_tag = 'public';"),
        ),
        migrations.RunSQL(
            sql=(
                "INSERT INTO acq_photo (seller_raw_data_id, image, source_tag, source_document_name, source_document_type, page_number, bbox, extraction_confidence, source_tool, caption, is_primary, created_at)\n"
                "SELECT seller_raw_data_id, photo, 'document', source_document_name, source_document_type, page_number, bbox, extraction_confidence, source_tool, caption, is_primary, COALESCE(extracted_at, CURRENT_TIMESTAMP)\n"
                "FROM acq_document_photo;"
            ),
            reverse_sql=("DELETE FROM acq_photo WHERE source_tag = 'document';"),
        ),
        migrations.RunSQL(
            sql=(
                "INSERT INTO acq_photo (seller_raw_data_id, image, source_tag, is_primary, created_at)\n"
                "SELECT bv.seller_raw_data_id, bp.photo, 'broker', FALSE, COALESCE(bp.upload_date, CURRENT_TIMESTAMP)\n"
                "FROM acq_broker_photo bp\n"
                "JOIN acq_broker_values bv ON bv.id = bp.broker_valuation_id;"
            ),
            reverse_sql=("DELETE FROM acq_photo WHERE source_tag = 'broker';"),
        ),
    ]
