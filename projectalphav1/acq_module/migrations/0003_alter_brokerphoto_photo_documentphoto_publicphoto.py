# Generated by Django 5.2.5 on 2025-08-19 20:47

import acq_module.models.valuations
import django.db.models.deletion
from django.db import migrations, models


class Migration(migrations.Migration):

    dependencies = [
        ('acq_module', '0002_move_seller_models_to_seller_data_schema'),
    ]

    operations = [
        migrations.AlterField(
            model_name='brokerphoto',
            name='photo',
            field=models.ImageField(upload_to=acq_module.models.valuations.get_broker_photo_path),
        ),
        migrations.CreateModel(
            name='DocumentPhoto',
            fields=[
                ('id', models.BigAutoField(auto_created=True, primary_key=True, serialize=False, verbose_name='ID')),
                ('photo', models.ImageField(help_text='Extracted image saved from a source document.', upload_to=acq_module.models.valuations.get_document_photo_path)),
                ('source_document_name', models.CharField(blank=True, help_text='Original filename or identifier of the source document.', max_length=255, null=True)),
                ('source_document_type', models.CharField(choices=[('pdf', 'PDF'), ('docx', 'Word (DOCX)'), ('image', 'Image'), ('other', 'Other')], default='other', help_text='Type of document the image was extracted from.', max_length=20)),
                ('page_number', models.IntegerField(blank=True, help_text='Page number in the source document where the image was found.', null=True)),
                ('bbox', models.JSONField(blank=True, help_text='Optional bounding box JSON (x, y, width, height) within the source document.', null=True)),
                ('extraction_confidence', models.DecimalField(blank=True, decimal_places=2, help_text='Confidence score (0-100) from the extraction tool, if provided.', max_digits=5, null=True)),
                ('source_tool', models.CharField(blank=True, help_text='Name/version of the extraction tool, for auditability.', max_length=100, null=True)),
                ('caption', models.CharField(blank=True, help_text='Short caption or alt text describing the image.', max_length=255, null=True)),
                ('is_primary', models.BooleanField(default=False, help_text='Flag to indicate this is a primary/representative image.')),
                ('extracted_at', models.DateTimeField(auto_now_add=True, help_text='When the image was extracted and recorded.')),
                ('seller_raw_data', models.ForeignKey(help_text='SellerRawData record this document-extracted photo belongs to.', on_delete=django.db.models.deletion.CASCADE, related_name='document_photos', to='acq_module.sellerrawdata')),
            ],
            options={
                'verbose_name': 'Document Photo',
                'verbose_name_plural': 'Document Photos',
                'db_table': 'acq_document_photo',
                'ordering': ['-extracted_at'],
                'indexes': [models.Index(fields=['seller_raw_data'], name='acq_documen_seller__7ed816_idx'), models.Index(fields=['source_document_type'], name='acq_documen_source__3dd686_idx'), models.Index(fields=['page_number'], name='acq_documen_page_nu_a1bb51_idx')],
            },
        ),
        migrations.CreateModel(
            name='PublicPhoto',
            fields=[
                ('id', models.BigAutoField(auto_created=True, primary_key=True, serialize=False, verbose_name='ID')),
                ('photo', models.ImageField(help_text='Uploaded public/scraped image file.', upload_to=acq_module.models.valuations.get_public_photo_path)),
                ('source', models.CharField(choices=[('google', 'Google'), ('zillow', 'Zillow'), ('realtor', 'Realtor'), ('redfin', 'Redfin'), ('other', 'Other')], default='other', help_text='Origin/source of the public image.', max_length=50)),
                ('source_url', models.URLField(blank=True, help_text='Original URL of the public image, if available.', null=True)),
                ('caption', models.CharField(blank=True, help_text='Short caption or alt text describing the image.', max_length=255, null=True)),
                ('is_primary', models.BooleanField(default=False, help_text='Flag to indicate this is the primary public image.')),
                ('scraped_at', models.DateTimeField(auto_now_add=True, help_text='When the image metadata/file was first recorded.')),
                ('seller_raw_data', models.ForeignKey(help_text='SellerRawData record this public photo belongs to.', on_delete=django.db.models.deletion.CASCADE, related_name='public_photos', to='acq_module.sellerrawdata')),
            ],
            options={
                'verbose_name': 'Public Photo',
                'verbose_name_plural': 'Public Photos',
                'db_table': 'acq_public_photo',
                'ordering': ['-scraped_at'],
                'indexes': [models.Index(fields=['seller_raw_data'], name='acq_public__seller__6c6c2e_idx'), models.Index(fields=['source'], name='acq_public__source_5d894a_idx')],
            },
        ),
    ]
