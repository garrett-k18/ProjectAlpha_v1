# Generated by Django 5.2.5 on 2025-08-12 20:59

import acq_module.models.valuations
import django.core.validators
import django.db.models.deletion
from django.db import migrations, models


class Migration(migrations.Migration):

    initial = True

    dependencies = [
    ]

    operations = [
        migrations.CreateModel(
            name='Seller',
            fields=[
                ('id', models.BigAutoField(auto_created=True, primary_key=True, serialize=False, verbose_name='ID')),
                ('name', models.CharField(max_length=100)),
                ('broker', models.CharField(max_length=100)),
                ('email', models.EmailField(max_length=254)),
                ('poc', models.CharField(max_length=100)),
            ],
            options={
                'verbose_name': 'Seller',
                'verbose_name_plural': 'Sellers',
                'ordering': ['name'],
                'indexes': [models.Index(fields=['name'], name='acq_module__name_aea276_idx')],
            },
        ),
        migrations.CreateModel(
            name='SellerRawData',
            fields=[
                ('id', models.BigAutoField(auto_created=True, primary_key=True, serialize=False, verbose_name='ID')),
                ('sellertape_id', models.IntegerField()),
                ('asset_status', models.CharField(max_length=100)),
                ('as_of_date', models.DateField()),
                ('street_address', models.CharField(max_length=100)),
                ('city', models.CharField(max_length=100)),
                ('state', models.CharField(max_length=100)),
                ('zip', models.CharField(max_length=100)),
                ('current_balance', models.DecimalField(decimal_places=2, max_digits=15)),
                ('deferred_balance', models.DecimalField(decimal_places=2, max_digits=15)),
                ('interest_rate', models.DecimalField(decimal_places=4, max_digits=6)),
                ('next_due_date', models.DateField()),
                ('last_paid_date', models.DateField()),
                ('first_pay_date', models.DateField()),
                ('origination_date', models.DateField()),
                ('original_balance', models.DecimalField(decimal_places=2, max_digits=15)),
                ('original_term', models.IntegerField()),
                ('original_rate', models.DecimalField(decimal_places=4, max_digits=6)),
                ('original_maturity_date', models.DateField()),
                ('default_rate', models.DecimalField(decimal_places=4, max_digits=6)),
                ('months_dlq', models.IntegerField(blank=True, null=True)),
                ('current_maturity_date', models.DateField()),
                ('current_term', models.IntegerField()),
                ('accrued_note_interest', models.DecimalField(decimal_places=2, max_digits=15)),
                ('accrued_default_interest', models.DecimalField(decimal_places=2, max_digits=15)),
                ('escrow_balance', models.DecimalField(decimal_places=2, max_digits=15)),
                ('escrow_advance', models.DecimalField(decimal_places=2, max_digits=15)),
                ('recoverable_corp_advance', models.DecimalField(decimal_places=2, max_digits=15)),
                ('late_fees', models.DecimalField(decimal_places=2, max_digits=15)),
                ('other_fees', models.DecimalField(decimal_places=2, max_digits=15)),
                ('suspense_balance', models.DecimalField(decimal_places=2, max_digits=15)),
                ('total_debt', models.DecimalField(blank=True, decimal_places=2, max_digits=15, null=True)),
                ('origination_value', models.DecimalField(decimal_places=2, max_digits=15)),
                ('origination_arv', models.DecimalField(decimal_places=2, max_digits=15)),
                ('origination_value_date', models.DateField()),
                ('seller_asis_value', models.DecimalField(decimal_places=2, max_digits=15)),
                ('seller_arv_value', models.DecimalField(decimal_places=2, max_digits=15)),
                ('seller_value_date', models.DateField()),
                ('additional_asis_value', models.DecimalField(decimal_places=2, max_digits=15)),
                ('additional_arv_value', models.DecimalField(decimal_places=2, max_digits=15)),
                ('additional_value_date', models.DateField()),
                ('fc_flag', models.BooleanField(default=False)),
                ('fc_first_legal_date', models.DateField(blank=True, null=True)),
                ('fc_referred_date', models.DateField(blank=True, null=True)),
                ('fc_judgement_date', models.DateField(blank=True, null=True)),
                ('fc_scheduled_sale_date', models.DateField(blank=True, null=True)),
                ('fc_sale_date', models.DateField(blank=True, null=True)),
                ('fc_starting', models.DecimalField(blank=True, decimal_places=2, max_digits=15, null=True)),
                ('bk_flag', models.BooleanField(default=False)),
                ('bk_chapter', models.CharField(blank=True, max_length=10, null=True)),
                ('mod_flag', models.BooleanField(default=False)),
                ('mod_date', models.DateField(blank=True, null=True)),
                ('mod_maturity_date', models.DateField(blank=True, null=True)),
                ('mod_term', models.IntegerField(blank=True, null=True)),
                ('mod_rate', models.DecimalField(blank=True, decimal_places=4, max_digits=6, null=True)),
                ('mod_initial_balance', models.DecimalField(blank=True, decimal_places=2, max_digits=15, null=True)),
                ('created_at', models.DateTimeField(auto_now_add=True)),
                ('updated_at', models.DateTimeField(auto_now=True)),
                ('seller', models.ForeignKey(on_delete=django.db.models.deletion.CASCADE, related_name='seller_raw_data', to='acq_module.seller')),
            ],
            options={
                'verbose_name': 'Seller Raw Data',
                'verbose_name_plural': 'Seller Raw Data',
                'ordering': ['-created_at'],
            },
        ),
        migrations.CreateModel(
            name='BrokerValues',
            fields=[
                ('id', models.BigAutoField(auto_created=True, primary_key=True, serialize=False, verbose_name='ID')),
                ('broker_asis_value', models.DecimalField(decimal_places=2, max_digits=15)),
                ('broker_arv_value', models.DecimalField(decimal_places=2, max_digits=15)),
                ('broker_value_date', models.DateField()),
                ('broker_notes', models.TextField(blank=True, null=True)),
                ('created_at', models.DateTimeField(auto_now_add=True)),
                ('updated_at', models.DateTimeField(auto_now=True)),
                ('seller_raw_data', models.OneToOneField(on_delete=django.db.models.deletion.CASCADE, related_name='broker_valuation', to='acq_module.sellerrawdata')),
            ],
            options={
                'verbose_name': 'Broker Values',
                'verbose_name_plural': 'Broker Values',
                'db_table': 'acq_broker_values',
                'ordering': ['-created_at'],
            },
        ),
        migrations.CreateModel(
            name='Servicer',
            fields=[
                ('id', models.BigAutoField(auto_created=True, primary_key=True, serialize=False, verbose_name='ID')),
                ('servicer_name', models.CharField(max_length=100, unique=True)),
                ('contact_name', models.CharField(max_length=100)),
                ('contact_email', models.EmailField(max_length=254)),
                ('contact_phone', models.CharField(max_length=20)),
                ('servicing_transfer_duration', models.IntegerField()),
                ('board_fee', models.DecimalField(decimal_places=2, max_digits=10)),
                ('current_fee', models.DecimalField(decimal_places=2, max_digits=10)),
                ('thirtday_fee', models.DecimalField(decimal_places=2, max_digits=10)),
                ('sixtyday_fee', models.DecimalField(decimal_places=2, max_digits=10)),
                ('ninetyday_fee', models.DecimalField(decimal_places=2, max_digits=10)),
                ('onetwentyday_fee', models.DecimalField(decimal_places=2, max_digits=10)),
                ('fc_fee', models.DecimalField(decimal_places=2, max_digits=10)),
                ('bk_fee', models.DecimalField(decimal_places=2, max_digits=10)),
                ('mod_fee', models.DecimalField(decimal_places=2, max_digits=10)),
                ('dil_fee', models.DecimalField(decimal_places=2, max_digits=10)),
                ('thirdparty_fee', models.DecimalField(decimal_places=2, max_digits=10)),
                ('reo_fee', models.DecimalField(decimal_places=2, max_digits=10)),
                ('reo_days', models.IntegerField()),
                ('liqfee_pct', models.DecimalField(decimal_places=2, max_digits=10)),
                ('liqfee_flat', models.DecimalField(decimal_places=2, max_digits=10)),
                ('created_at', models.DateTimeField(auto_now_add=True)),
                ('updated_at', models.DateTimeField(auto_now=True)),
            ],
            options={
                'verbose_name': 'Servicer',
                'verbose_name_plural': 'Servicers',
                'db_table': 'servicers',
                'ordering': ['servicer_name'],
                'indexes': [models.Index(fields=['servicer_name'], name='servicers_service_f132f6_idx')],
            },
        ),
        migrations.CreateModel(
            name='StateReference',
            fields=[
                ('state_code', models.CharField(max_length=2, primary_key=True, serialize=False)),
                ('state_name', models.CharField(max_length=50)),
                ('judicialvsnonjudicial', models.BooleanField(default=False, help_text='Is this a judicial foreclosure state')),
                ('fc_state_months', models.IntegerField(help_text='Average months to complete foreclosure')),
                ('eviction_duration', models.IntegerField(help_text='Average months to complete eviction')),
                ('rehab_duration', models.IntegerField(help_text='Average months to complete rehab')),
                ('reo_marketing_duration', models.IntegerField(help_text='Average months to complete reo marketing')),
                ('reo_local_market_ext_duration', models.IntegerField(help_text='Average months to complete reo local market extension')),
                ('dil_duration_avg', models.IntegerField(help_text='Average months to complete dilution')),
                ('property_tax_rate', models.DecimalField(decimal_places=4, help_text='Average property tax rate', max_digits=5)),
                ('transfer_tax_rate', models.DecimalField(decimal_places=4, help_text='Tax rate for property transfers', max_digits=5)),
                ('insurance_rate_avg', models.DecimalField(decimal_places=4, help_text='Average insurance rate', max_digits=5)),
                ('fc_legal_fees_avg', models.DecimalField(decimal_places=2, help_text='Average legal fees for foreclosure', max_digits=10)),
                ('dil_cost_avg', models.DecimalField(decimal_places=2, help_text='Average dilution cost', max_digits=10)),
                ('cfk_cost_avg', models.DecimalField(decimal_places=2, help_text='Average CFK cost', max_digits=10)),
                ('value_adjustment_annual', models.DecimalField(decimal_places=2, help_text='Average value adjustment', max_digits=10)),
                ('created_at', models.DateTimeField(auto_now_add=True)),
                ('updated_at', models.DateTimeField(auto_now=True)),
            ],
            options={
                'verbose_name': 'State Reference',
                'verbose_name_plural': 'State References',
                'db_table': 'state_reference',
                'ordering': ['state_name'],
                'indexes': [models.Index(fields=['state_code'], name='state_refer_state_c_df5719_idx')],
            },
        ),
        migrations.CreateModel(
            name='Trade',
            fields=[
                ('id', models.BigAutoField(auto_created=True, primary_key=True, serialize=False, verbose_name='ID')),
                ('trade_name', models.CharField(max_length=100)),
                ('seller', models.ForeignKey(on_delete=django.db.models.deletion.CASCADE, related_name='trades', to='acq_module.seller')),
            ],
            options={
                'verbose_name': 'Trade',
                'verbose_name_plural': 'Trades',
                'ordering': ['trade_name'],
            },
        ),
        migrations.AddField(
            model_name='sellerrawdata',
            name='trade',
            field=models.ForeignKey(on_delete=django.db.models.deletion.CASCADE, related_name='seller_raw_data', to='acq_module.trade'),
        ),
        migrations.CreateModel(
            name='TradeLevelAssumption',
            fields=[
                ('id', models.BigAutoField(auto_created=True, primary_key=True, serialize=False, verbose_name='ID')),
                ('bid_date', models.DateField()),
                ('settlement_date', models.DateField()),
                ('pctUPB', models.DecimalField(decimal_places=2, max_digits=15)),
                ('target_irr', models.DecimalField(decimal_places=4, max_digits=6)),
                ('discount_rate', models.DecimalField(decimal_places=4, max_digits=6)),
                ('perf_rpl_hold_period', models.IntegerField()),
                ('servicing_transfer_date', models.DateField(blank=True, null=True)),
                ('mod_rate', models.DecimalField(decimal_places=4, max_digits=6)),
                ('mod_term', models.IntegerField()),
                ('mod_balance', models.DecimalField(decimal_places=2, max_digits=15)),
                ('mod_date', models.DateField(blank=True, null=True)),
                ('mod_maturity_date', models.DateField(blank=True, null=True)),
                ('created_at', models.DateTimeField(auto_now_add=True)),
                ('updated_at', models.DateTimeField(auto_now=True)),
                ('trade', models.ForeignKey(on_delete=django.db.models.deletion.CASCADE, related_name='trade_assumptions', to='acq_module.trade')),
            ],
            options={
                'verbose_name': 'Trade Level Assumption',
                'verbose_name_plural': 'Trade Level Assumptions',
                'db_table': 'trade_level_assumptions',
                'ordering': ['-created_at'],
            },
        ),
        migrations.CreateModel(
            name='BrokerPhoto',
            fields=[
                ('id', models.BigAutoField(auto_created=True, primary_key=True, serialize=False, verbose_name='ID')),
                ('photo', models.ImageField(upload_to=acq_module.models.valuations.get_broker_photo_path)),
                ('upload_date', models.DateTimeField(auto_now_add=True)),
                ('broker_valuation', models.ForeignKey(on_delete=django.db.models.deletion.CASCADE, related_name='photos', to='acq_module.brokervalues')),
            ],
            options={
                'verbose_name': 'Broker Photo',
                'verbose_name_plural': 'Broker Photos',
                'db_table': 'acq_broker_photo',
                'ordering': ['upload_date'],
                'indexes': [models.Index(fields=['broker_valuation'], name='acq_broker__broker__9a9f11_idx')],
            },
        ),
        migrations.CreateModel(
            name='LoanLevelAssumption',
            fields=[
                ('id', models.BigAutoField(auto_created=True, primary_key=True, serialize=False, verbose_name='ID')),
                ('months_to_resolution', models.IntegerField(help_text='Estimated months to resolve the loan')),
                ('probability_of_cure', models.DecimalField(decimal_places=4, help_text='Probability between 0 and 1', max_digits=5, validators=[django.core.validators.MinValueValidator(0), django.core.validators.MaxValueValidator(1)])),
                ('probability_of_foreclosure', models.DecimalField(decimal_places=4, help_text='Probability between 0 and 1', max_digits=5, validators=[django.core.validators.MinValueValidator(0), django.core.validators.MaxValueValidator(1)])),
                ('recovery_percentage', models.DecimalField(decimal_places=4, help_text='Expected recovery percentage of principal', max_digits=5, validators=[django.core.validators.MinValueValidator(0), django.core.validators.MaxValueValidator(1)])),
                ('monthly_carrying_cost', models.DecimalField(decimal_places=2, max_digits=10)),
                ('legal_costs', models.DecimalField(decimal_places=2, max_digits=10)),
                ('foreclosure_costs', models.DecimalField(decimal_places=2, max_digits=10)),
                ('property_preservation_cost', models.DecimalField(decimal_places=2, max_digits=10)),
                ('estimated_reo_months', models.IntegerField(default=0)),
                ('estimated_rehab_cost', models.DecimalField(decimal_places=2, default=0, max_digits=10)),
                ('estimated_resale_value', models.DecimalField(blank=True, decimal_places=2, max_digits=15, null=True)),
                ('created_at', models.DateTimeField(auto_now_add=True)),
                ('updated_at', models.DateTimeField(auto_now=True)),
                ('seller_raw_data', models.ForeignKey(on_delete=django.db.models.deletion.CASCADE, related_name='loan_assumptions', to='acq_module.sellerrawdata')),
            ],
            options={
                'verbose_name': 'Loan Level Assumption',
                'verbose_name_plural': 'Loan Level Assumptions',
                'db_table': 'loan_level_assumptions',
                'ordering': ['-created_at'],
                'indexes': [models.Index(fields=['seller_raw_data'], name='loan_level__seller__1ecd72_idx')],
            },
        ),
        migrations.CreateModel(
            name='InternalValuation',
            fields=[
                ('id', models.BigAutoField(auto_created=True, primary_key=True, serialize=False, verbose_name='ID')),
                ('internal_uw_asis_value', models.DecimalField(decimal_places=2, max_digits=15)),
                ('internal_uw_arv_value', models.DecimalField(decimal_places=2, max_digits=15)),
                ('internal_uw_value_date', models.DateField()),
                ('thirdparty_asis_value', models.DecimalField(decimal_places=2, max_digits=15)),
                ('thirdparty_arv_value', models.DecimalField(decimal_places=2, max_digits=15)),
                ('thirdparty_value_date', models.DateField()),
                ('created_at', models.DateTimeField(auto_now_add=True)),
                ('updated_at', models.DateTimeField(auto_now=True)),
                ('seller_raw_data', models.OneToOneField(on_delete=django.db.models.deletion.CASCADE, related_name='internal_valuation', to='acq_module.sellerrawdata')),
            ],
            options={
                'verbose_name': 'Internal Valuation',
                'verbose_name_plural': 'Internal Valuations',
                'db_table': 'acq_internal_valuation',
                'ordering': ['-created_at'],
                'indexes': [models.Index(fields=['seller_raw_data'], name='acq_interna_seller__d3f9b7_idx')],
            },
        ),
        migrations.AddIndex(
            model_name='brokervalues',
            index=models.Index(fields=['seller_raw_data'], name='acq_broker__seller__ee33a2_idx'),
        ),
        migrations.AddIndex(
            model_name='trade',
            index=models.Index(fields=['seller'], name='acq_module__seller__17bbd4_idx'),
        ),
        migrations.AddIndex(
            model_name='sellerrawdata',
            index=models.Index(fields=['id'], name='acq_module__id_9f5dd7_idx'),
        ),
        migrations.AddIndex(
            model_name='sellerrawdata',
            index=models.Index(fields=['asset_status'], name='acq_module__asset_s_58e584_idx'),
        ),
        migrations.AddIndex(
            model_name='sellerrawdata',
            index=models.Index(fields=['seller'], name='acq_module__seller__bcce23_idx'),
        ),
        migrations.AddIndex(
            model_name='sellerrawdata',
            index=models.Index(fields=['trade'], name='acq_module__trade_i_6d8159_idx'),
        ),
        migrations.AddIndex(
            model_name='sellerrawdata',
            index=models.Index(fields=['state'], name='acq_module__state_2f12db_idx'),
        ),
        migrations.AlterUniqueTogether(
            name='sellerrawdata',
            unique_together={('seller', 'trade')},
        ),
        migrations.AddIndex(
            model_name='tradelevelassumption',
            index=models.Index(fields=['trade'], name='trade_level_trade_i_ee4dcc_idx'),
        ),
    ]
